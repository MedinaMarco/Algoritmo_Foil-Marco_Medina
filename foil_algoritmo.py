# -*- coding: utf-8 -*-
"""FOIL_Algoritmo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-bS3bnO9jnePRcZAJQLASO7tXRq0aSMy

# **Actividad 1: encontrar atributos unicos**
"""

datos = [
{"edad": 22, "departamento": "IT", "nivel_educativo": "terciario", "en_formacion": True},
{"edad": 24, "departamento": "IT", "nivel_educativo": "universitario", "en_formacion": True},
{"edad": 21, "departamento": "RRHH", "nivel_educativo": "terciario", "en_formacion": True},
{"edad": 35, "departamento": "IT", "nivel_educativo": "universitario", "en_formacion": False},
{"edad": 40, "departamento": "Finanzas", "nivel_educativo": "maestría", "en_formacion": False},
{"edad": 29, "departamento": "RRHH", "nivel_educativo": "universitario", "en_formacion": False},
{"edad": 23, "departamento": "IT", "nivel_educativo": "terciario", "en_formacion": True},
{"edad": 38, "departamento": "Finanzas", "nivel_educativo": "universitario", "en_formacion": False}]


positivos = [p for p in datos if p["en_formacion"]]
negativos = [p for p in datos if not p["en_formacion"]]



def inducir_regla(positivos, negativos):
    atributos = ["edad", "departamento", "nivel_educativo"]
    regla = {}

    for atributo in atributos:
        valores_pos = set(p[atributo] for p in positivos)
        valores_neg = set(p[atributo] for p in negativos)

        if atributo == "edad":
            valores_validos = [v for v in valores_pos if v not in valores_neg]
        else:
            valores_validos = list(valores_pos - valores_neg)


        if atributo == "departamento":
            regla[atributo] = list(valores_pos)
        elif valores_validos:
            regla[atributo] = valores_validos

    return regla

regla_inducida = inducir_regla(positivos, negativos)

print("regla inducida para identificar a un alumno: ")
for atributo, valores in regla_inducida.items():
  print(f"{atributo} debe ser uno de: {valores}")

"""# **Actividad 2: Aplicar FOIL Gain**"""

import math

def calcular_foil_gain(datos, condicion_atributo, condicion_valor):
    # Contadores iniciales (antes de aplicar la condición)
    P = sum(1 for p in datos if p["en_formacion"])
    N = sum(1 for p in datos if not p["en_formacion"])

    # Contadores después de aplicar la condición
    p = sum(1 for p in datos if p[condicion_atributo] == condicion_valor and p["en_formacion"])
    n = sum(1 for p in datos if p[condicion_atributo] == condicion_valor and not p["en_formacion"])

    # Cálculos para FOIL Gain
    def log2_safe(x):
      return math.log2(x) if x > 0 else float('-inf')

    foil_gain = p * (log2_safe(p / (p + n)) - log2_safe(P / (P + N)))

    # Mostrar resultados
    print(f"P = {P}, N = {N}")
    print(f"p = {p}, n = {n}")
    print(f"p / (p + n) = {p / (p + n):.3f}")
    print(f"P / (P + N) = {P / (P + N):.3f}")
    print(f"log2(p / (p + n)) = {log2_safe(p / (p + n)):.3f}")
    print(f"log2(P / (P + N)) = {log2_safe(P / (P + N)):.3f}")
    print(f"FOIL Gain = {foil_gain:.3f}")

    return foil_gain

# Calcular FOIL Gain para nivel_educativo == 'terciario'
foil_gain = calcular_foil_gain(datos, "nivel_educativo", "terciario")

"""# **Actividad 3: Aplicar FOIL Gain pero con al condicion de edad**"""

import math

def calcular_edad_foil_gain(datos, edad_limite):
    # Contadores iniciales (antes de aplicar la condición)
    P = sum(1 for p in datos if p["en_formacion"])
    N = sum(1 for p in datos if not p["en_formacion"])

    # Contadores después de aplicar la condición
    p = sum(1 for p in datos if p["edad"] <= edad_limite and p["en_formacion"])
    n = sum(1 for p in datos if p["edad"] <= edad_limite and not p["en_formacion"])

    # Cálculos para FOIL Gain
    def log2_safe(x):
      return math.log2(x) if x > 0 else float('-inf')

    foil_gain = p * (log2_safe(p / (p + n)) - log2_safe(P / (P + N)))

    # Mostrar resultados
    print(f"La condicion: edad <= {edad_limite}")
    print(f"P = {P}, N = {N}")
    print(f"p = {p}, n = {n}")
    print(f"p / (p + n) = {p / (p + n):.3f}")
    print(f"P / (P + N) = {P / (P + N):.3f}")
    print(f"log2(p / (p + n)) = {log2_safe(p / (p + n)):.3f}")
    print(f"log2(P / (P + N)) = {log2_safe(P / (P + N)):.3f}")
    print(f"FOIL Gain = {foil_gain:.3f}")

    return foil_gain

    # Calcular FOIL Gain para "edad" =< 23
foil_gain = calcular_edad_foil_gain(datos, 23)